1st method
var removeOccurrences = function(s, part) {
       while (s.includes(part)) {
        s = s.replace(part, '');
    }
    return s;
};
// time complextiy-O(n^2/m) sc-O(n)
///2nd method which is not good in practice 
var removeOccurrences = function(s, part) {
    let stack=[];
    let m=part.length;
    for(let ch of s){
        stack.push(ch);
        if(stack.length>=part.length){
            for(let i=m-1;i>=0;i--){
                if(stack[stack.length-1] === part[i]){
                    stack.pop();
                }else{
                    j=i+1;
                    while(j!==part.length){
                    stack.push(part[j]);
                    j++;
                    }
                    break;
                }
            }
        }
    }
    console.log(stack);
    return stack.join('');
};
time complextiy-O(n*m) sc-O(n)


3rd  approach
var removeOccurrences = function(s, part) {
    let stack=[];
    let m=part.length;
    for(let ch of s){
        stack.push(ch);
        if(stack.length>=m && stack.slice(-m).join('')==part){
            stack.length -= m;
        }
    }
    return stack.join('');
};
// time complextiy-O(n*m) sc-O(n)
console.log(removeOccurrences('axxxxyyyyb','xyy'));
//optimize approach kmp time complexity-O(n+m) sc-O(n+m)
