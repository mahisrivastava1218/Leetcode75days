//Bruite force
var minDominoRotations = function(tops, bottoms) {
    let minCount=+Infinity;
    for(let i=1;i<=6;i++){
        let res=[];
        let count=0;
        for(let j=0;j<tops.length;j++){
           if(tops[j]!==i){
               res[j]=bottoms[j];
               count++;
           }else{
            res[j]=i;
           }
        }
        // console.log(count);
        for(let j=0;j<res.length;j++){
            if(res[j]!==i){
                break;
            }else if(j==res.length-1 && res[j]==i){
                if(minCount>count){
                    minCount=count;
                }
            }
        }
        count=0;
        for(let j=0;j<bottoms.length;j++){
           if(bottoms[j]!==i){
               res[j]=tops[j];
               count++;
           }else{
            res[j]=i;
           }
        }
        // console.log(count);
        for(let j=0;j<res.length;j++){
            if(res[j]!==i){
                break;
            }else if(j==res.length-1 && res[j]==i){
                if(minCount>count){
                    minCount=count;
                }
            }
        }
    }
    return minCount === Infinity ? -1 : minCount;
    //tc: O(2n*6)=>O(12n)->O(n)
    //SC->O(n)
};
//optimize 
var minDominoRotations = function(tops, bottoms) {
    let minCount=Infinity;
    for(let i=1;i<=6;i++){
        let topRotation=0;
        let bottomRotation=0;
        let canMake=true;
        for(let j=0;j<tops.length;j++){
           if(tops[j]!==i && bottoms[j]!==i){
               canMake=false;
               break;
           }else if(tops[j]!==i){
            topRotation++;
           }else if(bottoms[j]!==i){
            bottomRotation++;
           }
        }
        if(canMake)minCount = Math.min(minCount,topRotation);
        if(canMake)minCount = Math.min(minCount,bottomRotation);
    }
    return minCount === Infinity ? -1 : minCount;
};
//tc:O(n) sc:O(1)
